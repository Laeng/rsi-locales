name: Locale File Validation
on:
  pull_request_target:
    branches: [ main ]
    paths: '**.json'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-json:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create validation script
        run: |
          cat > validate-locale.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function validateJSON(filePath) {
            const errors = [];
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              let data;
              
              try {
                data = JSON.parse(content);
              } catch (parseError) {
                errors.push(`JSON syntax error: ${parseError.message}`);
                return { valid: false, errors };
              }
              
              // Check required fields
              const requiredFields = ['version', 'lastUpdated', 'metadata', 'strings'];
              for (const field of requiredFields) {
                if (!(field in data)) {
                  errors.push(`Required field "${field}" is missing`);
                }
              }
              
              // Validate metadata if present
              if (data.metadata) {
                const requiredMetadata = ['locale', 'name', 'fallback'];
                for (const field of requiredMetadata) {
                  if (!(field in data.metadata)) {
                    errors.push(`Required metadata field "${field}" is missing`);
                  }
                }
              }
              
              // Validate lastUpdated format if present
              if (data.lastUpdated) {
                const dateRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$/;
                if (!dateRegex.test(data.lastUpdated)) {
                  errors.push('lastUpdated must be in ISO8601 format (YYYY-MM-DDThh:mm:ssZ)');
                }
              }
              
              // Validate strings if present
              if (data.strings) {
                if (typeof data.strings !== 'object' || Array.isArray(data.strings)) {
                  errors.push('strings must be an object');
                } else if (Object.keys(data.strings).length === 0) {
                  errors.push('strings object cannot be empty');
                }
              }
              
              return { valid: errors.length === 0, errors };
            } catch (error) {
              errors.push(`File reading error: ${error.message}`);
              return { valid: false, errors };
            }
          }
          
          const changedFiles = process.env.CHANGED_FILES.split(' ').filter(Boolean);
          let hasErrors = false;
          const validationResults = [];
          
          for (const file of changedFiles) {
            if (file.endsWith('.json')) {
              console.log(`Validating ${file}...`);
              const result = validateJSON(file);
              if (!result.valid) {
                hasErrors = true;
                validationResults.push({
                  file,
                  errors: result.errors
                });
              } else {
                validationResults.push({
                  file,
                  success: true
                });
              }
            }
          }
          
          // Save results to JSON file
          fs.writeFileSync('validation-results.json', JSON.stringify(validationResults, null, 2));
          process.exit(hasErrors ? 1 : 0);
          EOF

      - name: Get changed files
        id: changed-files
        run: |
          echo "CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Validate JSON files
        id: validation
        continue-on-error: true
        run: |
          node validate-locale.js
          echo "status=$?" >> $GITHUB_OUTPUT

      - name: Create PR Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## JSON Validation Results\n\n';
            
            try {
              const results = JSON.parse(fs.readFileSync('validation-results.json', 'utf8'));
              
              if (results.length === 0) {
                comment += 'No JSON files to validate.\n';
              } else {
                for (const result of results) {
                  if (result.success) {
                    comment += `### ✅ \`${result.file}\`\n`;
                    comment += 'All validations passed successfully.\n\n';
                  } else {
                    comment += `### ❌ \`${result.file}\`\n`;
                    comment += 'The following issues were found:\n';
                    result.errors.forEach(error => {
                      comment += `- ${error}\n`;
                    });
                    comment += '\n';
                  }
                }
              }
            } catch (error) {
              comment += '⚠️ Error occurred while loading validation results.\n';
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check validation result
        if: steps.validation.outputs.status != '0'
        run: exit 1
